# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
                'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
                'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
                'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
                'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# category types

class categoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the category create method"""
    id: _int
    product: 'productCreateManyNestedWithoutRelationsInput'


class categoryCreateInput(categoryOptionalCreateInput):
    """Required arguments to the category create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class categoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the category create method, without relations"""
    id: _int


class categoryCreateWithoutRelationsInput(categoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the category create method, without relations"""
    name: _str

class categoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'categoryCreateWithoutRelationsInput'
    where: 'categoryWhereUniqueInput'

class categoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'categoryCreateWithoutRelationsInput'
    connect: 'categoryWhereUniqueInput'
    connect_or_create: 'categoryConnectOrCreateWithoutRelationsInput'


class categoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['categoryCreateWithoutRelationsInput', List['categoryCreateWithoutRelationsInput']]
    connect: Union['categoryWhereUniqueInput', List['categoryWhereUniqueInput']]
    connect_or_create: Union['categoryConnectOrCreateWithoutRelationsInput', List['categoryConnectOrCreateWithoutRelationsInput']]

_categoryWhereUnique_id_Input = TypedDict(
    '_categoryWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_categoryWhereUnique_name_Input = TypedDict(
    '_categoryWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

categoryWhereUniqueInput = Union[
    '_categoryWhereUnique_id_Input',
    '_categoryWhereUnique_name_Input',
]


class categoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    product: 'productUpdateManyWithoutRelationsInput'


class categoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str


class categoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['categoryCreateWithoutRelationsInput']
    connect: List['categoryWhereUniqueInput']
    connect_or_create: List['categoryConnectOrCreateWithoutRelationsInput']
    set: List['categoryWhereUniqueInput']
    disconnect: List['categoryWhereUniqueInput']
    delete: List['categoryWhereUniqueInput']

    # TODO
    # update: List['categoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['categoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['categoryScalarWhereInput']
    # upsert: List['categoryUpserteWithWhereUniqueWithoutRelationsInput']


class categoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'categoryCreateWithoutRelationsInput'
    connect: 'categoryWhereUniqueInput'
    connect_or_create: 'categoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'categoryUpdateInput'
    # upsert: 'categoryUpsertWithoutRelationsInput'


class categoryUpsertInput(TypedDict):
    create: 'categoryCreateInput'
    update: 'categoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_category_id_OrderByInput = TypedDict(
    '_category_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_category_name_OrderByInput = TypedDict(
    '_category_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_category_RelevanceInner = TypedDict(
    '_category_RelevanceInner',
    {
        'fields': 'List[categoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_category_RelevanceOrderByInput = TypedDict(
    '_category_RelevanceOrderByInput',
    {
        '_relevance': '_category_RelevanceInner',
    },
    total=True
)

categoryOrderByInput = Union[
    '_category_id_OrderByInput',
    '_category_name_OrderByInput',
    '_category_RelevanceOrderByInput',
]



# recursive category types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

categoryRelationFilter = TypedDict(
    'categoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class categoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class categoryInclude(TypedDict, total=False):
    """category relational arguments"""
    product: Union[bool, 'FindManyproductArgsFromcategory']


    

class categoryIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    product: Union[bool, 'FindManyproductArgsFromcategoryRecursive1']


class categoryIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    product: Union[bool, 'FindManyproductArgsFromcategoryRecursive2']


class categoryIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    product: Union[bool, 'FindManyproductArgsFromcategoryRecursive3']


class categoryIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    product: Union[bool, 'FindManyproductArgsFromcategoryRecursive4']


class categoryIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class categoryArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManycategoryArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class companyIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    product: Union[bool, 'FindManyproductArgsFromcategoryRecursive1']


class companyIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    product: Union[bool, 'FindManyproductArgsFromcategoryRecursive2']


class companyIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    product: Union[bool, 'FindManyproductArgsFromcategoryRecursive3']


class companyIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    product: Union[bool, 'FindManyproductArgsFromcategoryRecursive4']


class companyIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class companyArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'companyIncludeFromcompanyRecursive1'


class companyArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'companyIncludeFromcompanyRecursive2'


class companyArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'companyIncludeFromcompanyRecursive3'


class companyArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'companyIncludeFromcompanyRecursive4'


class companyArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManycompanyArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive1'


class FindManycompanyArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive2'


class FindManycompanyArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive3'


class FindManycompanyArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive4'


class FindManycompanyArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    
    

class productIncludeFromcategory(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive1']
    company: Union[bool, 'companyArgsFromcategoryRecursive1']


class productIncludeFromcategoryRecursive1(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive2']
    company: Union[bool, 'companyArgsFromcategoryRecursive2']


class productIncludeFromcategoryRecursive2(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive3']
    company: Union[bool, 'companyArgsFromcategoryRecursive3']


class productIncludeFromcategoryRecursive3(TypedDict, total=False):
    """Relational arguments for category"""
    category: Union[bool, 'categoryArgsFromcategoryRecursive4']
    company: Union[bool, 'companyArgsFromcategoryRecursive4']


class productIncludeFromcategoryRecursive4(TypedDict, total=False):
    """Relational arguments for category"""

    

class productArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    include: 'productIncludeFromproductRecursive1'


class productArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    include: 'productIncludeFromproductRecursive2'


class productArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    include: 'productIncludeFromproductRecursive3'


class productArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    include: 'productIncludeFromproductRecursive4'


class productArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    
    

class FindManyproductArgsFromcategory(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive1'


class FindManyproductArgsFromcategoryRecursive1(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive2'


class FindManyproductArgsFromcategoryRecursive2(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive3'


class FindManyproductArgsFromcategoryRecursive3(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive4'


class FindManyproductArgsFromcategoryRecursive4(TypedDict, total=False):
    """Arguments for category"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    


FindManycategoryArgs = FindManycategoryArgsFromcategory
FindFirstcategoryArgs = FindManycategoryArgsFromcategory


    

class categoryWhereInput(TypedDict, total=False):
    """category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    product: 'productListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryWhereInputRecursive1', List['categoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['categoryWhereInputRecursive1']
    OR: List['categoryWhereInputRecursive1']
    NOT: List['categoryWhereInputRecursive1']


class categoryWhereInputRecursive1(TypedDict, total=False):
    """category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    product: 'productListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryWhereInputRecursive2', List['categoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['categoryWhereInputRecursive2']
    OR: List['categoryWhereInputRecursive2']
    NOT: List['categoryWhereInputRecursive2']


class categoryWhereInputRecursive2(TypedDict, total=False):
    """category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    product: 'productListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryWhereInputRecursive3', List['categoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['categoryWhereInputRecursive3']
    OR: List['categoryWhereInputRecursive3']
    NOT: List['categoryWhereInputRecursive3']


class categoryWhereInputRecursive3(TypedDict, total=False):
    """category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    product: 'productListRelationFilter'

    # should be noted that AND and NOT should be Union['categoryWhereInputRecursive4', List['categoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['categoryWhereInputRecursive4']
    OR: List['categoryWhereInputRecursive4']
    NOT: List['categoryWhereInputRecursive4']


class categoryWhereInputRecursive4(TypedDict, total=False):
    """category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    product: 'productListRelationFilter'



# aggregate category types


    

class categoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['categoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['categoryScalarWhereWithAggregatesInputRecursive1']


class categoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['categoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['categoryScalarWhereWithAggregatesInputRecursive2']


class categoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['categoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['categoryScalarWhereWithAggregatesInputRecursive3']


class categoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['categoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['categoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['categoryScalarWhereWithAggregatesInputRecursive4']


class categoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class categoryGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'categorySumAggregateOutput'
    _avg: 'categoryAvgAggregateOutput'
    _min: 'categoryMinAggregateOutput'
    _max: 'categoryMaxAggregateOutput'
    _count: 'categoryCountAggregateOutput'


class categoryAvgAggregateOutput(TypedDict, total=False):
    """category output for aggregating averages"""
    id: float


class categorySumAggregateOutput(TypedDict, total=False):
    """category output for aggregating sums"""
    id: _int


class categoryScalarAggregateOutput(TypedDict, total=False):
    """category output including scalar fields"""
    id: _int
    name: _str


categoryMinAggregateOutput = categoryScalarAggregateOutput
categoryMaxAggregateOutput = categoryScalarAggregateOutput


class categoryMaxAggregateInput(TypedDict, total=False):
    """category input for aggregating by max"""
    id: bool
    name: bool


class categoryMinAggregateInput(TypedDict, total=False):
    """category input for aggregating by min"""
    id: bool
    name: bool


class categoryNumberAggregateInput(TypedDict, total=False):
    """category input for aggregating numbers"""
    id: bool


categoryAvgAggregateInput = categoryNumberAggregateInput
categorySumAggregateInput = categoryNumberAggregateInput


categoryCountAggregateInput = TypedDict(
    'categoryCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

categoryCountAggregateOutput = TypedDict(
    'categoryCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


categoryKeys = Literal[
    'id',
    'name',
    'product',
]
categoryScalarFieldKeys = Literal[
    'id',
    'name',
]
categoryScalarFieldKeysT = TypeVar('categoryScalarFieldKeysT', bound=categoryScalarFieldKeys)

categoryRelationalFieldKeys = Literal[
        'product',
    ]

# company types

class companyOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the company create method"""
    id: _int
    description: Optional[_str]
    product: 'productCreateManyNestedWithoutRelationsInput'


class companyCreateInput(companyOptionalCreateInput):
    """Required arguments to the company create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class companyOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the company create method, without relations"""
    id: _int
    description: Optional[_str]


class companyCreateWithoutRelationsInput(companyOptionalCreateWithoutRelationsInput):
    """Required arguments to the company create method, without relations"""
    name: _str

class companyConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'companyCreateWithoutRelationsInput'
    where: 'companyWhereUniqueInput'

class companyCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'companyCreateWithoutRelationsInput'
    connect: 'companyWhereUniqueInput'
    connect_or_create: 'companyConnectOrCreateWithoutRelationsInput'


class companyCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['companyCreateWithoutRelationsInput', List['companyCreateWithoutRelationsInput']]
    connect: Union['companyWhereUniqueInput', List['companyWhereUniqueInput']]
    connect_or_create: Union['companyConnectOrCreateWithoutRelationsInput', List['companyConnectOrCreateWithoutRelationsInput']]

_companyWhereUnique_id_Input = TypedDict(
    '_companyWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_companyWhereUnique_name_Input = TypedDict(
    '_companyWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

companyWhereUniqueInput = Union[
    '_companyWhereUnique_id_Input',
    '_companyWhereUnique_name_Input',
]


class companyUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: Optional[_str]
    product: 'productUpdateManyWithoutRelationsInput'


class companyUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: Optional[_str]


class companyUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['companyCreateWithoutRelationsInput']
    connect: List['companyWhereUniqueInput']
    connect_or_create: List['companyConnectOrCreateWithoutRelationsInput']
    set: List['companyWhereUniqueInput']
    disconnect: List['companyWhereUniqueInput']
    delete: List['companyWhereUniqueInput']

    # TODO
    # update: List['companyUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['companyUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['companyScalarWhereInput']
    # upsert: List['companyUpserteWithWhereUniqueWithoutRelationsInput']


class companyUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'companyCreateWithoutRelationsInput'
    connect: 'companyWhereUniqueInput'
    connect_or_create: 'companyConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'companyUpdateInput'
    # upsert: 'companyUpsertWithoutRelationsInput'


class companyUpsertInput(TypedDict):
    create: 'companyCreateInput'
    update: 'companyUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_company_id_OrderByInput = TypedDict(
    '_company_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_company_name_OrderByInput = TypedDict(
    '_company_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_company_description_OrderByInput = TypedDict(
    '_company_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_company_RelevanceInner = TypedDict(
    '_company_RelevanceInner',
    {
        'fields': 'List[companyScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_company_RelevanceOrderByInput = TypedDict(
    '_company_RelevanceOrderByInput',
    {
        '_relevance': '_company_RelevanceInner',
    },
    total=True
)

companyOrderByInput = Union[
    '_company_id_OrderByInput',
    '_company_name_OrderByInput',
    '_company_description_OrderByInput',
    '_company_RelevanceOrderByInput',
]



# recursive company types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

companyRelationFilter = TypedDict(
    'companyRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class companyListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class companyInclude(TypedDict, total=False):
    """company relational arguments"""
    product: Union[bool, 'FindManyproductArgsFromcompany']


    

class categoryIncludeFromcompany(TypedDict, total=False):
    """Relational arguments for company"""
    product: Union[bool, 'FindManyproductArgsFromcompanyRecursive1']


class categoryIncludeFromcompanyRecursive1(TypedDict, total=False):
    """Relational arguments for company"""
    product: Union[bool, 'FindManyproductArgsFromcompanyRecursive2']


class categoryIncludeFromcompanyRecursive2(TypedDict, total=False):
    """Relational arguments for company"""
    product: Union[bool, 'FindManyproductArgsFromcompanyRecursive3']


class categoryIncludeFromcompanyRecursive3(TypedDict, total=False):
    """Relational arguments for company"""
    product: Union[bool, 'FindManyproductArgsFromcompanyRecursive4']


class categoryIncludeFromcompanyRecursive4(TypedDict, total=False):
    """Relational arguments for company"""

    

class categoryArgsFromcompany(TypedDict, total=False):
    """Arguments for company"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromcompanyRecursive1(TypedDict, total=False):
    """Arguments for company"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromcompanyRecursive2(TypedDict, total=False):
    """Arguments for company"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromcompanyRecursive3(TypedDict, total=False):
    """Arguments for company"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromcompanyRecursive4(TypedDict, total=False):
    """Arguments for company"""
    
    

class FindManycategoryArgsFromcompany(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromcompanyRecursive1(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromcompanyRecursive2(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromcompanyRecursive3(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromcompanyRecursive4(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class companyIncludeFromcompany(TypedDict, total=False):
    """Relational arguments for company"""
    product: Union[bool, 'FindManyproductArgsFromcompanyRecursive1']


class companyIncludeFromcompanyRecursive1(TypedDict, total=False):
    """Relational arguments for company"""
    product: Union[bool, 'FindManyproductArgsFromcompanyRecursive2']


class companyIncludeFromcompanyRecursive2(TypedDict, total=False):
    """Relational arguments for company"""
    product: Union[bool, 'FindManyproductArgsFromcompanyRecursive3']


class companyIncludeFromcompanyRecursive3(TypedDict, total=False):
    """Relational arguments for company"""
    product: Union[bool, 'FindManyproductArgsFromcompanyRecursive4']


class companyIncludeFromcompanyRecursive4(TypedDict, total=False):
    """Relational arguments for company"""

    

class companyArgsFromcompany(TypedDict, total=False):
    """Arguments for company"""
    include: 'companyIncludeFromcompanyRecursive1'


class companyArgsFromcompanyRecursive1(TypedDict, total=False):
    """Arguments for company"""
    include: 'companyIncludeFromcompanyRecursive2'


class companyArgsFromcompanyRecursive2(TypedDict, total=False):
    """Arguments for company"""
    include: 'companyIncludeFromcompanyRecursive3'


class companyArgsFromcompanyRecursive3(TypedDict, total=False):
    """Arguments for company"""
    include: 'companyIncludeFromcompanyRecursive4'


class companyArgsFromcompanyRecursive4(TypedDict, total=False):
    """Arguments for company"""
    
    

class FindManycompanyArgsFromcompany(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive1'


class FindManycompanyArgsFromcompanyRecursive1(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive2'


class FindManycompanyArgsFromcompanyRecursive2(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive3'


class FindManycompanyArgsFromcompanyRecursive3(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive4'


class FindManycompanyArgsFromcompanyRecursive4(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    
    

class productIncludeFromcompany(TypedDict, total=False):
    """Relational arguments for company"""
    category: Union[bool, 'categoryArgsFromcompanyRecursive1']
    company: Union[bool, 'companyArgsFromcompanyRecursive1']


class productIncludeFromcompanyRecursive1(TypedDict, total=False):
    """Relational arguments for company"""
    category: Union[bool, 'categoryArgsFromcompanyRecursive2']
    company: Union[bool, 'companyArgsFromcompanyRecursive2']


class productIncludeFromcompanyRecursive2(TypedDict, total=False):
    """Relational arguments for company"""
    category: Union[bool, 'categoryArgsFromcompanyRecursive3']
    company: Union[bool, 'companyArgsFromcompanyRecursive3']


class productIncludeFromcompanyRecursive3(TypedDict, total=False):
    """Relational arguments for company"""
    category: Union[bool, 'categoryArgsFromcompanyRecursive4']
    company: Union[bool, 'companyArgsFromcompanyRecursive4']


class productIncludeFromcompanyRecursive4(TypedDict, total=False):
    """Relational arguments for company"""

    

class productArgsFromcompany(TypedDict, total=False):
    """Arguments for company"""
    include: 'productIncludeFromproductRecursive1'


class productArgsFromcompanyRecursive1(TypedDict, total=False):
    """Arguments for company"""
    include: 'productIncludeFromproductRecursive2'


class productArgsFromcompanyRecursive2(TypedDict, total=False):
    """Arguments for company"""
    include: 'productIncludeFromproductRecursive3'


class productArgsFromcompanyRecursive3(TypedDict, total=False):
    """Arguments for company"""
    include: 'productIncludeFromproductRecursive4'


class productArgsFromcompanyRecursive4(TypedDict, total=False):
    """Arguments for company"""
    
    

class FindManyproductArgsFromcompany(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive1'


class FindManyproductArgsFromcompanyRecursive1(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive2'


class FindManyproductArgsFromcompanyRecursive2(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive3'


class FindManyproductArgsFromcompanyRecursive3(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive4'


class FindManyproductArgsFromcompanyRecursive4(TypedDict, total=False):
    """Arguments for company"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    


FindManycompanyArgs = FindManycompanyArgsFromcompany
FindFirstcompanyArgs = FindManycompanyArgsFromcompany


    

class companyWhereInput(TypedDict, total=False):
    """company arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    product: 'productListRelationFilter'

    # should be noted that AND and NOT should be Union['companyWhereInputRecursive1', List['companyWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['companyWhereInputRecursive1']
    OR: List['companyWhereInputRecursive1']
    NOT: List['companyWhereInputRecursive1']


class companyWhereInputRecursive1(TypedDict, total=False):
    """company arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    product: 'productListRelationFilter'

    # should be noted that AND and NOT should be Union['companyWhereInputRecursive2', List['companyWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['companyWhereInputRecursive2']
    OR: List['companyWhereInputRecursive2']
    NOT: List['companyWhereInputRecursive2']


class companyWhereInputRecursive2(TypedDict, total=False):
    """company arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    product: 'productListRelationFilter'

    # should be noted that AND and NOT should be Union['companyWhereInputRecursive3', List['companyWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['companyWhereInputRecursive3']
    OR: List['companyWhereInputRecursive3']
    NOT: List['companyWhereInputRecursive3']


class companyWhereInputRecursive3(TypedDict, total=False):
    """company arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    product: 'productListRelationFilter'

    # should be noted that AND and NOT should be Union['companyWhereInputRecursive4', List['companyWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['companyWhereInputRecursive4']
    OR: List['companyWhereInputRecursive4']
    NOT: List['companyWhereInputRecursive4']


class companyWhereInputRecursive4(TypedDict, total=False):
    """company arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    product: 'productListRelationFilter'



# aggregate company types


    

class companyScalarWhereWithAggregatesInput(TypedDict, total=False):
    """company arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['companyScalarWhereWithAggregatesInputRecursive1']
    OR: List['companyScalarWhereWithAggregatesInputRecursive1']
    NOT: List['companyScalarWhereWithAggregatesInputRecursive1']


class companyScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """company arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['companyScalarWhereWithAggregatesInputRecursive2']
    OR: List['companyScalarWhereWithAggregatesInputRecursive2']
    NOT: List['companyScalarWhereWithAggregatesInputRecursive2']


class companyScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """company arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['companyScalarWhereWithAggregatesInputRecursive3']
    OR: List['companyScalarWhereWithAggregatesInputRecursive3']
    NOT: List['companyScalarWhereWithAggregatesInputRecursive3']


class companyScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """company arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['companyScalarWhereWithAggregatesInputRecursive4']
    OR: List['companyScalarWhereWithAggregatesInputRecursive4']
    NOT: List['companyScalarWhereWithAggregatesInputRecursive4']


class companyScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """company arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class companyGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    description: _str
    _sum: 'companySumAggregateOutput'
    _avg: 'companyAvgAggregateOutput'
    _min: 'companyMinAggregateOutput'
    _max: 'companyMaxAggregateOutput'
    _count: 'companyCountAggregateOutput'


class companyAvgAggregateOutput(TypedDict, total=False):
    """company output for aggregating averages"""
    id: float


class companySumAggregateOutput(TypedDict, total=False):
    """company output for aggregating sums"""
    id: _int


class companyScalarAggregateOutput(TypedDict, total=False):
    """company output including scalar fields"""
    id: _int
    name: _str
    description: _str


companyMinAggregateOutput = companyScalarAggregateOutput
companyMaxAggregateOutput = companyScalarAggregateOutput


class companyMaxAggregateInput(TypedDict, total=False):
    """company input for aggregating by max"""
    id: bool
    name: bool
    description: bool


class companyMinAggregateInput(TypedDict, total=False):
    """company input for aggregating by min"""
    id: bool
    name: bool
    description: bool


class companyNumberAggregateInput(TypedDict, total=False):
    """company input for aggregating numbers"""
    id: bool


companyAvgAggregateInput = companyNumberAggregateInput
companySumAggregateInput = companyNumberAggregateInput


companyCountAggregateInput = TypedDict(
    'companyCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

companyCountAggregateOutput = TypedDict(
    'companyCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


companyKeys = Literal[
    'id',
    'name',
    'description',
    'product',
]
companyScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
]
companyScalarFieldKeysT = TypeVar('companyScalarFieldKeysT', bound=companyScalarFieldKeys)

companyRelationalFieldKeys = Literal[
        'product',
    ]

# product types

class productOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the product create method"""
    id: _int
    description: Optional[_str]
    companyId: _int
    categoryId: _int
    category: 'categoryCreateNestedWithoutRelationsInput'
    company: 'companyCreateNestedWithoutRelationsInput'


class productCreateInput(productOptionalCreateInput):
    """Required arguments to the product create method"""
    name: _str
    price: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class productOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the product create method, without relations"""
    id: _int
    description: Optional[_str]
    companyId: _int
    categoryId: _int


class productCreateWithoutRelationsInput(productOptionalCreateWithoutRelationsInput):
    """Required arguments to the product create method, without relations"""
    name: _str
    price: _float

class productConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'productCreateWithoutRelationsInput'
    where: 'productWhereUniqueInput'

class productCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'productCreateWithoutRelationsInput'
    connect: 'productWhereUniqueInput'
    connect_or_create: 'productConnectOrCreateWithoutRelationsInput'


class productCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['productCreateWithoutRelationsInput', List['productCreateWithoutRelationsInput']]
    connect: Union['productWhereUniqueInput', List['productWhereUniqueInput']]
    connect_or_create: Union['productConnectOrCreateWithoutRelationsInput', List['productConnectOrCreateWithoutRelationsInput']]

_productWhereUnique_id_Input = TypedDict(
    '_productWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

productWhereUniqueInput = _productWhereUnique_id_Input


class productUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: Optional[_str]
    price: Union[AtomicFloatInput, _float]
    category: 'categoryUpdateOneWithoutRelationsInput'
    company: 'companyUpdateOneWithoutRelationsInput'


class productUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: Optional[_str]
    price: Union[AtomicFloatInput, _float]


class productUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['productCreateWithoutRelationsInput']
    connect: List['productWhereUniqueInput']
    connect_or_create: List['productConnectOrCreateWithoutRelationsInput']
    set: List['productWhereUniqueInput']
    disconnect: List['productWhereUniqueInput']
    delete: List['productWhereUniqueInput']

    # TODO
    # update: List['productUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['productUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['productScalarWhereInput']
    # upsert: List['productUpserteWithWhereUniqueWithoutRelationsInput']


class productUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'productCreateWithoutRelationsInput'
    connect: 'productWhereUniqueInput'
    connect_or_create: 'productConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'productUpdateInput'
    # upsert: 'productUpsertWithoutRelationsInput'


class productUpsertInput(TypedDict):
    create: 'productCreateInput'
    update: 'productUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_product_id_OrderByInput = TypedDict(
    '_product_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_product_name_OrderByInput = TypedDict(
    '_product_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_product_description_OrderByInput = TypedDict(
    '_product_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_product_price_OrderByInput = TypedDict(
    '_product_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_product_companyId_OrderByInput = TypedDict(
    '_product_companyId_OrderByInput',
    {
        'companyId': 'SortOrder',
    },
    total=True
)

_product_categoryId_OrderByInput = TypedDict(
    '_product_categoryId_OrderByInput',
    {
        'categoryId': 'SortOrder',
    },
    total=True
)

_product_RelevanceInner = TypedDict(
    '_product_RelevanceInner',
    {
        'fields': 'List[productScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_product_RelevanceOrderByInput = TypedDict(
    '_product_RelevanceOrderByInput',
    {
        '_relevance': '_product_RelevanceInner',
    },
    total=True
)

productOrderByInput = Union[
    '_product_id_OrderByInput',
    '_product_name_OrderByInput',
    '_product_description_OrderByInput',
    '_product_price_OrderByInput',
    '_product_companyId_OrderByInput',
    '_product_categoryId_OrderByInput',
    '_product_RelevanceOrderByInput',
]



# recursive product types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

productRelationFilter = TypedDict(
    'productRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class productListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class productInclude(TypedDict, total=False):
    """product relational arguments"""
    category: Union[bool, 'categoryArgsFromproduct']
    company: Union[bool, 'companyArgsFromproduct']


    

class categoryIncludeFromproduct(TypedDict, total=False):
    """Relational arguments for product"""
    product: Union[bool, 'FindManyproductArgsFromproductRecursive1']


class categoryIncludeFromproductRecursive1(TypedDict, total=False):
    """Relational arguments for product"""
    product: Union[bool, 'FindManyproductArgsFromproductRecursive2']


class categoryIncludeFromproductRecursive2(TypedDict, total=False):
    """Relational arguments for product"""
    product: Union[bool, 'FindManyproductArgsFromproductRecursive3']


class categoryIncludeFromproductRecursive3(TypedDict, total=False):
    """Relational arguments for product"""
    product: Union[bool, 'FindManyproductArgsFromproductRecursive4']


class categoryIncludeFromproductRecursive4(TypedDict, total=False):
    """Relational arguments for product"""

    

class categoryArgsFromproduct(TypedDict, total=False):
    """Arguments for product"""
    include: 'categoryIncludeFromcategoryRecursive1'


class categoryArgsFromproductRecursive1(TypedDict, total=False):
    """Arguments for product"""
    include: 'categoryIncludeFromcategoryRecursive2'


class categoryArgsFromproductRecursive2(TypedDict, total=False):
    """Arguments for product"""
    include: 'categoryIncludeFromcategoryRecursive3'


class categoryArgsFromproductRecursive3(TypedDict, total=False):
    """Arguments for product"""
    include: 'categoryIncludeFromcategoryRecursive4'


class categoryArgsFromproductRecursive4(TypedDict, total=False):
    """Arguments for product"""
    
    

class FindManycategoryArgsFromproduct(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive1'


class FindManycategoryArgsFromproductRecursive1(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive2'


class FindManycategoryArgsFromproductRecursive2(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive3'


class FindManycategoryArgsFromproductRecursive3(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    include: 'categoryIncludeFromcategoryRecursive4'


class FindManycategoryArgsFromproductRecursive4(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['categoryOrderByInput', List['categoryOrderByInput']]
    where: 'categoryWhereInput'
    cursor: 'categoryWhereUniqueInput'
    distinct: List['categoryScalarFieldKeys']
    
    

class companyIncludeFromproduct(TypedDict, total=False):
    """Relational arguments for product"""
    product: Union[bool, 'FindManyproductArgsFromproductRecursive1']


class companyIncludeFromproductRecursive1(TypedDict, total=False):
    """Relational arguments for product"""
    product: Union[bool, 'FindManyproductArgsFromproductRecursive2']


class companyIncludeFromproductRecursive2(TypedDict, total=False):
    """Relational arguments for product"""
    product: Union[bool, 'FindManyproductArgsFromproductRecursive3']


class companyIncludeFromproductRecursive3(TypedDict, total=False):
    """Relational arguments for product"""
    product: Union[bool, 'FindManyproductArgsFromproductRecursive4']


class companyIncludeFromproductRecursive4(TypedDict, total=False):
    """Relational arguments for product"""

    

class companyArgsFromproduct(TypedDict, total=False):
    """Arguments for product"""
    include: 'companyIncludeFromcompanyRecursive1'


class companyArgsFromproductRecursive1(TypedDict, total=False):
    """Arguments for product"""
    include: 'companyIncludeFromcompanyRecursive2'


class companyArgsFromproductRecursive2(TypedDict, total=False):
    """Arguments for product"""
    include: 'companyIncludeFromcompanyRecursive3'


class companyArgsFromproductRecursive3(TypedDict, total=False):
    """Arguments for product"""
    include: 'companyIncludeFromcompanyRecursive4'


class companyArgsFromproductRecursive4(TypedDict, total=False):
    """Arguments for product"""
    
    

class FindManycompanyArgsFromproduct(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive1'


class FindManycompanyArgsFromproductRecursive1(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive2'


class FindManycompanyArgsFromproductRecursive2(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive3'


class FindManycompanyArgsFromproductRecursive3(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    include: 'companyIncludeFromcompanyRecursive4'


class FindManycompanyArgsFromproductRecursive4(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['companyOrderByInput', List['companyOrderByInput']]
    where: 'companyWhereInput'
    cursor: 'companyWhereUniqueInput'
    distinct: List['companyScalarFieldKeys']
    
    

class productIncludeFromproduct(TypedDict, total=False):
    """Relational arguments for product"""
    category: Union[bool, 'categoryArgsFromproductRecursive1']
    company: Union[bool, 'companyArgsFromproductRecursive1']


class productIncludeFromproductRecursive1(TypedDict, total=False):
    """Relational arguments for product"""
    category: Union[bool, 'categoryArgsFromproductRecursive2']
    company: Union[bool, 'companyArgsFromproductRecursive2']


class productIncludeFromproductRecursive2(TypedDict, total=False):
    """Relational arguments for product"""
    category: Union[bool, 'categoryArgsFromproductRecursive3']
    company: Union[bool, 'companyArgsFromproductRecursive3']


class productIncludeFromproductRecursive3(TypedDict, total=False):
    """Relational arguments for product"""
    category: Union[bool, 'categoryArgsFromproductRecursive4']
    company: Union[bool, 'companyArgsFromproductRecursive4']


class productIncludeFromproductRecursive4(TypedDict, total=False):
    """Relational arguments for product"""

    

class productArgsFromproduct(TypedDict, total=False):
    """Arguments for product"""
    include: 'productIncludeFromproductRecursive1'


class productArgsFromproductRecursive1(TypedDict, total=False):
    """Arguments for product"""
    include: 'productIncludeFromproductRecursive2'


class productArgsFromproductRecursive2(TypedDict, total=False):
    """Arguments for product"""
    include: 'productIncludeFromproductRecursive3'


class productArgsFromproductRecursive3(TypedDict, total=False):
    """Arguments for product"""
    include: 'productIncludeFromproductRecursive4'


class productArgsFromproductRecursive4(TypedDict, total=False):
    """Arguments for product"""
    
    

class FindManyproductArgsFromproduct(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive1'


class FindManyproductArgsFromproductRecursive1(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive2'


class FindManyproductArgsFromproductRecursive2(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive3'


class FindManyproductArgsFromproductRecursive3(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    include: 'productIncludeFromproductRecursive4'


class FindManyproductArgsFromproductRecursive4(TypedDict, total=False):
    """Arguments for product"""
    take: int
    skip: int
    order_by: Union['productOrderByInput', List['productOrderByInput']]
    where: 'productWhereInput'
    cursor: 'productWhereUniqueInput'
    distinct: List['productScalarFieldKeys']
    


FindManyproductArgs = FindManyproductArgsFromproduct
FindFirstproductArgs = FindManyproductArgsFromproduct


    

class productWhereInput(TypedDict, total=False):
    """product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[_float, 'types.FloatFilter']
    companyId: Union[_int, 'types.IntFilter']
    categoryId: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    company: 'companyRelationFilter'

    # should be noted that AND and NOT should be Union['productWhereInputRecursive1', List['productWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['productWhereInputRecursive1']
    OR: List['productWhereInputRecursive1']
    NOT: List['productWhereInputRecursive1']


class productWhereInputRecursive1(TypedDict, total=False):
    """product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[_float, 'types.FloatFilter']
    companyId: Union[_int, 'types.IntFilter']
    categoryId: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    company: 'companyRelationFilter'

    # should be noted that AND and NOT should be Union['productWhereInputRecursive2', List['productWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['productWhereInputRecursive2']
    OR: List['productWhereInputRecursive2']
    NOT: List['productWhereInputRecursive2']


class productWhereInputRecursive2(TypedDict, total=False):
    """product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[_float, 'types.FloatFilter']
    companyId: Union[_int, 'types.IntFilter']
    categoryId: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    company: 'companyRelationFilter'

    # should be noted that AND and NOT should be Union['productWhereInputRecursive3', List['productWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['productWhereInputRecursive3']
    OR: List['productWhereInputRecursive3']
    NOT: List['productWhereInputRecursive3']


class productWhereInputRecursive3(TypedDict, total=False):
    """product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[_float, 'types.FloatFilter']
    companyId: Union[_int, 'types.IntFilter']
    categoryId: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    company: 'companyRelationFilter'

    # should be noted that AND and NOT should be Union['productWhereInputRecursive4', List['productWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['productWhereInputRecursive4']
    OR: List['productWhereInputRecursive4']
    NOT: List['productWhereInputRecursive4']


class productWhereInputRecursive4(TypedDict, total=False):
    """product arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[_float, 'types.FloatFilter']
    companyId: Union[_int, 'types.IntFilter']
    categoryId: Union[_int, 'types.IntFilter']
    category: 'categoryRelationFilter'
    company: 'companyRelationFilter'



# aggregate product types


    

class productScalarWhereWithAggregatesInput(TypedDict, total=False):
    """product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    companyId: Union[_int, 'types.IntWithAggregatesFilter']
    categoryId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['productScalarWhereWithAggregatesInputRecursive1']
    OR: List['productScalarWhereWithAggregatesInputRecursive1']
    NOT: List['productScalarWhereWithAggregatesInputRecursive1']


class productScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    companyId: Union[_int, 'types.IntWithAggregatesFilter']
    categoryId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['productScalarWhereWithAggregatesInputRecursive2']
    OR: List['productScalarWhereWithAggregatesInputRecursive2']
    NOT: List['productScalarWhereWithAggregatesInputRecursive2']


class productScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    companyId: Union[_int, 'types.IntWithAggregatesFilter']
    categoryId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['productScalarWhereWithAggregatesInputRecursive3']
    OR: List['productScalarWhereWithAggregatesInputRecursive3']
    NOT: List['productScalarWhereWithAggregatesInputRecursive3']


class productScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    companyId: Union[_int, 'types.IntWithAggregatesFilter']
    categoryId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['productScalarWhereWithAggregatesInputRecursive4']
    OR: List['productScalarWhereWithAggregatesInputRecursive4']
    NOT: List['productScalarWhereWithAggregatesInputRecursive4']


class productScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """product arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    companyId: Union[_int, 'types.IntWithAggregatesFilter']
    categoryId: Union[_int, 'types.IntWithAggregatesFilter']



class productGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    description: _str
    price: _float
    companyId: _int
    categoryId: _int
    _sum: 'productSumAggregateOutput'
    _avg: 'productAvgAggregateOutput'
    _min: 'productMinAggregateOutput'
    _max: 'productMaxAggregateOutput'
    _count: 'productCountAggregateOutput'


class productAvgAggregateOutput(TypedDict, total=False):
    """product output for aggregating averages"""
    id: float
    price: float
    companyId: float
    categoryId: float


class productSumAggregateOutput(TypedDict, total=False):
    """product output for aggregating sums"""
    id: _int
    price: _float
    companyId: _int
    categoryId: _int


class productScalarAggregateOutput(TypedDict, total=False):
    """product output including scalar fields"""
    id: _int
    name: _str
    description: _str
    price: _float
    companyId: _int
    categoryId: _int


productMinAggregateOutput = productScalarAggregateOutput
productMaxAggregateOutput = productScalarAggregateOutput


class productMaxAggregateInput(TypedDict, total=False):
    """product input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    price: bool
    companyId: bool
    categoryId: bool


class productMinAggregateInput(TypedDict, total=False):
    """product input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    price: bool
    companyId: bool
    categoryId: bool


class productNumberAggregateInput(TypedDict, total=False):
    """product input for aggregating numbers"""
    id: bool
    price: bool
    companyId: bool
    categoryId: bool


productAvgAggregateInput = productNumberAggregateInput
productSumAggregateInput = productNumberAggregateInput


productCountAggregateInput = TypedDict(
    'productCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'price': bool,
        'companyId': bool,
        'categoryId': bool,
        '_all': bool,
    },
    total=False,
)

productCountAggregateOutput = TypedDict(
    'productCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'price': int,
        'companyId': int,
        'categoryId': int,
        '_all': int,
    },
    total=False,
)


productKeys = Literal[
    'id',
    'name',
    'description',
    'price',
    'companyId',
    'categoryId',
    'category',
    'company',
]
productScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'price',
    'companyId',
    'categoryId',
]
productScalarFieldKeysT = TypeVar('productScalarFieldKeysT', bound=productScalarFieldKeys)

productRelationalFieldKeys = Literal[
        'category',
        'company',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields